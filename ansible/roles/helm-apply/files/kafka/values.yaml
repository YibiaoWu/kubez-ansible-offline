image:
  registry: docker.io
  repository: bitnami/kafka
  tag: 2.8.0-debian-10-r43
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
hostAliases: []
podManagementPolicy: Parallel
clusterDomain: cluster.local
commonLabels: {}
commonAnnotations: {}
heapOpts: -Xmx6144m -Xms6144m
deleteTopicEnable: true
autoCreateTopicsEnable: false
logFlushIntervalMessages: _10000
logFlushIntervalMs: 1000
logRetentionBytes: _21474836480
logRetentionCheckIntervalMs: 300000
logRetentionHours: 168
logSegmentBytes: _2147483647
logsDirs: /bitnami/kafka/data
maxMessageBytes: _10485760
defaultReplicationFactor: 1
offsetsTopicReplicationFactor: 1
transactionStateLogReplicationFactor: 1
transactionStateLogMinIsr: 1
numIoThreads: 15
numNetworkThreads: 10
numPartitions: 1
numRecoveryThreadsPerDataDir: 1
socketReceiveBufferBytes: 819200
socketRequestMaxBytes: _524288000
socketSendBufferBytes: 819200
zookeeperConnectionTimeoutMs: 6000
command:
  - /scripts/setup.sh
args: []
extraEnvVars:
  - name: TZ
    value: "Asia/Shanghai"
  - name: KAFKA_CFG_UNCLEAN_LEADER_ELECTION_ENABLE
    value: "true"
  - name: KAFKA_CFG_NUM_REPLICA_FETCHERS
    value: "5"
  - name: KAFKA_CFG_REPLICA_FETCH_MIN_BYTES
    value: "1"
  - name: KAFKA_CFG_REPLICA_FETCH_MAX_BYTES
    value: "10485760"
  - name: KAFKA_CFG_CLEANUP_POLICY
    value: "delete"
extraVolumes: []
extraVolumeMounts: []
extraDeploy: []
auth:
  clientProtocol: plaintext
  interBrokerProtocol: plaintext
  sasl:
    mechanisms: plain,scram-sha-256,scram-sha-512
    interBrokerMechanism: plain
    jaas:
      clientUsers:
        - user
      clientPasswords: []
      interBrokerUser: admin
      interBrokerPassword: ""
      zookeeperUser: ""
      zookeeperPassword: ""
      existingSecret: ""
  saslMechanisms: plain,scram-sha-256,scram-sha-512
  saslInterBrokerMechanism: plain
  jaas:
    clientUsers:
      - user
    clientPasswords: []
    interBrokerUser: admin
    interBrokerPassword: ""
    zookeeperUser: ""
    zookeeperPassword: ""
    existingSecret: ""
  tls:
    type: jks
    existingSecret: ""
    autoGenerated: false
    password: ""
    jksTruststoreSecret: ""
    jksKeystoreSAN: ""
    jksTruststore: ""
    endpointIdentificationAlgorithm: https
  jksSecret: ""
  jksTruststoreSecret: ""
  jksKeystoreSAN: ""
  jksTruststore: ""
  jksPassword: ""
  tlsEndpointIdentificationAlgorithm: https
listeners: []
advertisedListeners: []
allowPlaintextListener: true
interBrokerListenerName: INTERNAL
replicaCount: 1
minBrokerId: 1
updateStrategy: RollingUpdate
podLabels: {}
podAnnotations: {}
priorityClassName: ""
podAffinityPreset: ""
podAntiAffinityPreset: hard
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
podSecurityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
containerSecurityContext: {}
resources:
  limits:
    cpu: 10000m
    memory: 16Gi
  requests:
    cpu: 1000m
    memory: 2Gi
livenessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 30
  failureThreshold: 6
  timeoutSeconds: 5
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  failureThreshold: 3
  timeoutSeconds: 5
customLivenessProbe: {}
customReadinessProbe: {}
pdb:
  create: false
  maxUnavailable: 1
sidecars: {}
service:
  type: ClusterIP
  port: 9092
  internalPort: 9093
  externalPort: 9094
  nodePorts:
    client: ""
    external: ""
  loadBalancerSourceRanges: []
  annotations: {}
externalAccess:
  enabled: false
  autoDiscovery:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.19.12-debian-10-r5
      pullPolicy: IfNotPresent
      pullSecrets: []
    resources:
      limits: {}
      requests: {}
  service:
    type: LoadBalancer
    port: 9094
    loadBalancerIPs: []
    loadBalancerSourceRanges: []
    nodePorts: []
    useHostIPs: false
    annotations: {}
persistence:
  enabled: true
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  annotations: {}
  selector: {}
  mountPath: /bitnami/kafka
logPersistence:
  enabled: false
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  annotations: {}
  selector: {}
  mountPath: /opt/bitnami/kafka/logs
volumePermissions:
  enabled: false
  securityContext:
    runAsUser: 0
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r115
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}
serviceAccount:
  create: true
  automountServiceAccountToken: true
rbac:
  create: false
provisioning:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/kafka
    tag: 2.8.0-debian-10-r42
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  numPartitions: 1
  replicationFactor: 1
  podAnnotations: {}
  resources:
    limits: {}
    requests: {}
  command: []
  args: []
  topics: []
metrics:
  kafka:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/kafka-exporter
      tag: 1.3.1-debian-10-r30
      pullPolicy: IfNotPresent
      pullSecrets: []
    extraFlags: {}
    tlsCert: cert-file
    tlsKey: key-file
    tlsCaCert: ca-file
    resources:
      limits: {}
      requests: {}
    affinity: {}
    nodeSelector: {}
    tolerations: []
    initContainers: {}
    service:
      type: ClusterIP
      port: 9308
      nodePort: ""
      loadBalancerSourceRanges: []
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.kafka.service.port }}"
        prometheus.io/path: "/metrics"
  jmx:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/jmx-exporter
      tag: 0.15.0-debian-10-r135
      pullPolicy: IfNotPresent
      pullSecrets: []
    resources:
      limits: {}
      requests: {}
    service:
      type: ClusterIP
      port: 5556
      nodePort: ""
      loadBalancerSourceRanges: []
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.jmx.service.port }}"
        prometheus.io/path: "/"
    whitelistObjectNames:
      - kafka.controller:*
      - kafka.server:*
      - java.lang:*
      - kafka.network:*
      - kafka.log:*
    config: |-
      jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:5555/jmxrmi
      lowercaseOutputName: true
      lowercaseOutputLabelNames: true
      ssl: false
      {{- if .Values.metrics.jmx.whitelistObjectNames }}
      whitelistObjectNames: ["{{ join "\",\"" .Values.metrics.jmx.whitelistObjectNames }}"]
      {{- end }}
  serviceMonitor:
    enabled: false
zookeeper:
  enabled: false
  auth:
    enabled: false
externalZookeeper:
  servers: ["zk-zookeeper.zookeeper:2181/kafka"]
initContainers: []
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
